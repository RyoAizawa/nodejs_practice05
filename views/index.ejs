<!DOCTYPE html>
<html lang="ja">
    <head>
        <meta charset="UTF-8">
        <meta http-equiv="X-UA-Compatible" content="IE=edge">
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <title>商品レビュー</title>
        <meta name="description" content="">
        <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/twitter-bootstrap/4.4.0/css/bootstrap-reboot.min.css">
        <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/font-awesome/4.7.0/css/font-awesome.min.css">
        <link rel="stylesheet" href="./css/style.css">
    </head>
    <body>
        <header>
            <h1><a href="/">商品レビューページ</a></h1>
        </header>
        <main>
            <div class="graph-contents-area">
                <p>年代別グラフ</p>
                <table class="graph-table" id="graphTable"></table>
            </div>
            <div class="user-action-area">
                    <div>
                        並べ替え
                        <select id="sortSelect">
                            <option value="" disabled selected>選択してください</option>
                            <option value="base" <% if (order === "base") { %> selected <% } %>> 標準</option>
                            <option value="rating:desc" <% if (order === "desc") { %> selected <% } %>> 評価が高い順</option>
                            <option value="rating:asc"  <% if (order === "asc") { %> selected <% } %>> 評価が低い順</option>
                        </select>
                        絞り込み
                        <select id="searchRating">
                            <option value="" disabled selected>選択してください</option>
                            <option value="base"<% if(search === "base") {%> selected <% } %>>標準</option>
                            <option value="rating:1" <% if(search === "1") {%> selected <% } %>>評価１</option>
                            <option value="rating:2" <% if(search === "2") {%> selected <% } %>>評価２</option>
                            <option value="rating:3" <% if(search === "3") {%> selected <% } %>>評価３</option>
                            <option value="rating:4" <% if(search === "4") {%> selected <% } %>>評価４</option>
                            <option value="rating:5" <% if(search === "5") {%> selected <% } %>>評価５</option>
                        </select>
                    </div>
                    <div class="review-post">
                        <a href="/post"><i class="fa fa-pencil" aria-hidden="true"></i>レビューを投稿する</a>
                    </div>
            </div>
            <div id="reviewArea"></div>
        </main>
        <footer>
            <div class="footer-textarea">&copy; hoge.,LTD. all rights reserved</div>
        </footer>
        <script>
            const filteredPersonas = JSON.parse('<%= JSON.stringify(filteredPersonas) %>'.replace(/&#34;/g, '"'));
            // グラフ描画用に全ユーザー分の情報を取得
            const personasOrg = JSON.parse('<%= JSON.stringify(personasOrg) %>'.replace(/&#34;/g, '"'));
            const reviewArea  = document.querySelector("#reviewArea")
            // 「並べ替え」のセレクトボックス
            const sortSelect  = document.querySelector("#sortSelect")
            // 「絞り込み」のセレクトボックス
            const searchRating  = document.querySelector("#searchRating")
            // 年代別グラフを描画するテーブル
            const graphTable = document.querySelector("#graphTable")

            // ページ読み込み時は初期値を出力
            window.onload = () => {
                createTableData(filteredPersonas);
                drawingGraph(personasOrg);
            };

            // 並べ替えを選択された場合のソート処理
            sortSelect.addEventListener("change", sortAndSearchSelect)
            // 絞り込みを選択された場合の処理
            searchRating.addEventListener("change", sortAndSearchSelect)

            /*
                並べ替えもしくは絞り込みを選択された場合のメソッド
            */
            function sortAndSearchSelect() {
                let res = ""
                let filterObj = []
                // 絞り込みの値
                let search = ""
                // ソートの値
                let order = ""
                // ソートに選択された値を検索
                for(option of sortSelect.options) {
                    if (option.selected && option.value !== "") {
                        filterObj["order"] = option.value
                    }
                }
                // 絞り込みに選択された値を検索
                for(option of searchRating.options) {
                    if (option.selected && option.value !== "") {
                        filterObj["search"] = option.value
                    }
                }
                // 「order=rating:asc」「search=rating:1」のような形に
                const filterArray = Object.keys(filterObj).map(function (key) {
                    return [`${key}=${filterObj[key]}`];
                });
                // 複数あれば、「order=asc+search=1」のような形に変換、なければカンマは削除
                filterArray.length > 1 ? res = filterArray.join("+") : res = filterArray.join("")
                // ソートしたユーザー情報でindexをレンダリングする
                location.assign(`/${res}`)
            }

            /*
                各年代別のグラフを描画するメソッド
            */
            function drawingGraph(personasObj) {
                // 各年代別の人数をカウントする変数
                const ageArr = ["10代", "20代", "30代", "40代", "50代以上"]
                ageArr.forEach((age) => {
                    // 要素の作成
                    const tableRow   = document.createElement("tr")
                    const ageTd      = document.createElement("td")
                    const meterArea  = document.createElement("td")
                    const meter      = document.createElement("div")
                    const total      = document.createElement("td")
                    // クラス属性の付与
                    meterArea.classList.add("graph-meter-area")
                    meter.classList.add("graph-meter")
                    // データの取得
                    ageTd.innerHTML = age
                    // 年代別に人数をカウント
                    let count = 0;
                    personasObj.forEach((person) => {
                        if(age === "10代") {
                            // 10歳以上20歳未満（10代）
                            if(person.age >= 10 && person.age < 20) count++
                        } else if(age === "20代") {
                            // 20歳以上30歳未満（20代）
                            if(person.age >= 20 && person.age < 30) count++
                        } else if(age === "30代"){
                            // 30歳以上40歳未満（30代）
                            if(person.age >= 30 && person.age < 40) count++
                        } else if(age === "40代"){
                            // 40歳以上50歳未満（40代）
                            if(person.age >= 40 && person.age < 50) count++
                        } else if(age === "50代以上"){
                            // 50歳以上
                            if(person.age >= 50) count++
                        }
                    })
                    total.innerHTML = `${count}件 `
                    // メーターの幅プロパティに「総人数/年代人数*100」で割合を設定
                    meter.style.width = `${Math.floor((count / personasObj.length) * 100)}%`
                    // テーブル行の完成
                    meterArea.append(meter)
                    tableRow.append(ageTd)
                    tableRow.append(meterArea)
                    tableRow.append(total)
                    // ブラウザに出力
                    graphTable.append(tableRow)
                })
            }

            /*
            ブラウザに出力するデータを作成するメソッド
                personasObj...ブラウザ出力するデータ群
            */
            function createTableData(personasObj) {
                // リストは都度初期化
                while(reviewArea.firstChild) {
                    reviewArea.firstChild.remove()
                }
                // 渡されたオブジェクトの分だけリストデータの作成
                personasObj.map((person) => {
                    // ユーザー情報表示領域の作成
                    const reviewUser    = document.createElement("div")
                    const userImgParag  = document.createElement("p")
                    const userImg       = document.createElement("img")
                    const usernameParag = document.createElement("p")
                    const age           = document.createElement("span")
                    // 各要素へ属性の付与
                    reviewUser.classList.add("review-user")
                    userImg.setAttribute("src", "https://placehold.jp/80x80.png")
                    age.classList.add("age")
                    // ユーザーの名前と年齢を受け取る
                    usernameParag.innerHTML = `${person.username}さん`
                    age.innerHTML           = `${person.age}歳`
                    // ユーザー情報表示領域の完成
                    userImgParag.append(userImg)
                    usernameParag.append(age)
                    reviewUser.append(userImgParag)
                    reviewUser.append(usernameParag)

                    // レビュー表示領域領域の作成
                    const reviewContent = document.createElement("div")
                    const ratingArea    = document.createElement("div")
                    const ratingParag   = document.createElement("p")
                    const ratingSpan    = document.createElement("span")
                    const reason        = document.createElement("p")
                    const editLink      = document.createElement("a")
                    // 各要素へ属性の付与
                    reviewContent.classList.add("review-content")
                    ratingArea.classList.add("rating-area")
                    // ユーザー評価に合わせて星を設定
                    const rating = person.rating
                    if(person.rating === 1) {
                        ratingParag.innerHTML = `&#9733;&#9734;&#9734;&#9734;&#9734`
                    } else if(person.rating === 2) {
                        ratingParag.innerHTML = `&#9733;&#9733;&#9734;&#9734;&#9734`
                    } else if(person.rating === 3) {
                        ratingParag.innerHTML = `&#9733;&#9733;&#9733;&#9734;&#9734`
                    } else if(person.rating === 4) {
                        ratingParag.innerHTML = `&#9733;&#9733;&#9733;&#9733;&#9734`
                    } else if(person.rating === 5) {
                        ratingParag.innerHTML = `&#9733;&#9733;&#9733;&#9733;&#9733`
                    }
                    ratingSpan.innerHTML = person.rating

                    // 改行を含む文字列の場合、改行コードをbrタグに変換する
                    if(person.reason.match("\n") !== null ) {
                        person.reason = person.reason.replace(/\n/g, "<br>")
                    }
                    reason.innerHTML = person.reason
                    editLink.innerHTML = "レビューを編集する"
                    editLink.classList.add("edit-Link")
                    editLink.setAttribute("href",`/edit/${person.id}`)
                    // レビュー表示領域の完成
                    ratingParag.append(ratingSpan)
                    ratingArea.append(ratingParag)
                    reviewContent.append(ratingArea)
                    reviewContent.append(reason)
                    reviewContent.append(editLink)
                    // 各領域を内包する要素の作成
                    const contentWrapper = document.createElement("div")
                    contentWrapper.classList.add("review-contentarea")
                    contentWrapper.append(reviewUser)
                    contentWrapper.append(reviewContent)
                    // ブラウザへ出力
                    reviewArea.append(contentWrapper)
                })
            }

        </script>
    </body>
</html>
