<!DOCTYPE html>
<html lang="ja">
    <head>
        <meta charset="UTF-8">
        <meta http-equiv="X-UA-Compatible" content="IE=edge">
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <title>商品レビュー</title>
        <meta name="description" content="">
        <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/twitter-bootstrap/4.4.0/css/bootstrap-reboot.min.css">
        <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/font-awesome/4.7.0/css/font-awesome.min.css">
        <link rel="stylesheet" href="./css/style.css">
    </head>
    <body>
        <header>
            <h1><a href="/">商品レビューページ</a></h1>
        </header>
        <main>
            <div class="graph-contents-area">
                <p>年代別グラフ</p>
                <table class="graph-table" id="graphTable"></table>
            </div>
            <div class="user-action-area">
                    <div>
                        並べ替え
                        <select id="sortSelect">
                            <option value="" disabled selected>選択してください</option>
                            <option value="base">標準</option>
                            <option value="ratingHi">評価が高い順</option>
                            <option value="ratingLow">評価が低い順</option>
                        </select>
                        絞り込み
                        <select id="searchRating">
                            <option value="" disabled selected>選択してください</option>
                            <option value="base">標準</option>
                            <option value="ratingOne">評価１</option>
                            <option value="ratingTwo">評価２</option>
                            <option value="ratingThree">評価３</option>
                            <option value="ratingFour">評価４</option>
                            <option value="ratingFive">評価５</option>
                        </select>
                    </div>
                    <div class="review-post">
                        <a href="/post"><i class="fa fa-pencil" aria-hidden="true"></i>レビューを投稿する</a>
                    </div>
            </div>
            <div id="reviewArea"></div>
        </main>
        <footer>
            <div class="footer-textarea">&copy; hoge.,LTD. all rights reserved</div>
        </footer>
        <script>
            const personasOrg = JSON.parse('<%= JSON.stringify(personas) %>'.replace(/&#34;/g, '"'));
            const reviewArea  = document.querySelector("#reviewArea")
            // 「並べ替え」のセレクトボックス
            const sortSelect  = document.querySelector("#sortSelect")
            // 「絞り込み」のセレクトボックス
            const searchRating  = document.querySelector("#searchRating")
            // 年代別グラフを描画するテーブル
            const graphTable = document.querySelector("#graphTable")

            // ページ読み込み時は初期値を出力
            window.onload = () => {
                createTableData(personasOrg);
                drawingGraph();
            };

            // 並べ替えを選択された場合のソート処理
            sortSelect.addEventListener("change", sortAndSearchList)
            searchRating.addEventListener("change", sortAndSearchList)

            // 各年代別のグラフを描画する関数
            function drawingGraph() {
                // 各年代別の人数をカウントする変数
                const ageArr = ["10代", "20代", "30代", "40代", "50代以上"]
                ageArr.forEach((age) => {
                    // 要素の作成
                    const tableRow   = document.createElement("tr")
                    const ageTd      = document.createElement("td")
                    const meterArea  = document.createElement("td")
                    const meter      = document.createElement("div")
                    const total      = document.createElement("td")
                    // クラス属性の付与
                    meterArea.classList.add("graph-meter-area")
                    meter.classList.add("graph-meter")
                    // データの取得
                    ageTd.innerHTML = age
                    // 年代別に人数をカウント
                    let count = 0;
                    personasOrg.forEach((person) => {
                        if(age === "10代") {
                            // 10歳以上20歳未満（10代）
                            if(person.age >= 10 && person.age < 20) count++
                        } else if(age === "20代") {
                            // 20歳以上30歳未満（20代）
                            if(person.age >= 20 && person.age < 30) count++
                        } else if(age === "30代"){
                            // 30歳以上40歳未満（30代）
                            if(person.age >= 30 && person.age < 40) count++
                        } else if(age === "40代"){
                            // 40歳以上50歳未満（40代）
                            if(person.age >= 40 && person.age < 50) count++
                        } else if(age === "50代以上"){
                            // 50歳以上
                            if(person.age >= 50) count++
                        }
                    })
                    total.innerHTML = `${count}件 `
                    // メーターの幅プロパティに「総人数/年代人数*100」で割合を設定
                    meter.style.width = `${Math.floor((count / personasOrg.length) * 100)}%`
                    // テーブル行の完成
                    meterArea.append(meter)
                    tableRow.append(ageTd)
                    tableRow.append(meterArea)
                    tableRow.append(total)
                    // ブラウザに出力
                    graphTable.append(tableRow)
                })
            }

            /*
                ソート、検索用関数
                並べ替えを維持したまま検索、検索を維持したまま並べ替えを行えるよう
                ソート関数内で検索処理も実行する
            */
            function sortAndSearchList() {
                // 絞り込み済みリストの取得
                const filteredArr = searchList(personasOrg)
                // 選択項目順にソート
                for(const option of sortSelect.options) {
                    if(option.selected) {
                        if(option.value === "ratingHi") {
                            filteredArr.sort((a, b) => {
                                return b.rating - a.rating;
                            });
                        } else if(option.value === "ratingLow") {
                            filteredArr.sort((a, b) => {
                                return a.rating - b.rating;
                            });
                        }
                    }
                }
                // ソート済みのリストでブラウザ出力
                createTableData(filteredArr);
            }

            // 選択された項目で絞り込まれたリストを返す関数
            function searchList(personasOrg) {
                // 絞り込み済みリスト
                const searchArr = []
                for(const option of searchRating.options) {
                    if(option.selected) {
                        personasOrg.map((elem) => {
                            // 選択した評価値と一致する要素は絞り込み済みリストへプッシュ
                            if((option.value === "ratingOne" && elem.rating === 1)
                            || (option.value === "ratingTwo" && elem.rating === 2)
                            || (option.value === "ratingThree" && elem.rating === 3)
                            || (option.value === "ratingFour" && elem.rating === 4)
                            || (option.value === "ratingFive" && elem.rating === 5)) {
                                searchArr.push(elem)
                            }
                            // 標準が選択された場合は無条件で要素を絞り込み済みリストへプッシュ
                            else if(option.value === "base" || option.value === "") searchArr.push(elem)
                        })
                    }
                }
                // 絞り込み済みリストを返す
                return searchArr
            }

            /*
            ブラウザに出力するデータを作成するメソッド
                personasObj...ブラウザ出力するデータ群
            */
            function createTableData(personasObj) {
                // リストは都度初期化
                while(reviewArea.firstChild) {
                    reviewArea.firstChild.remove()
                }
                // 渡されたオブジェクトの分だけリストデータの作成
                personasObj.map((person) => {
                    // ユーザー情報表示領域の作成
                    const reviewUser    = document.createElement("div")
                    const userImgParag  = document.createElement("p")
                    const userImg       = document.createElement("img")
                    const usernameParag = document.createElement("p")
                    const age           = document.createElement("span")
                    // 各要素へ属性の付与
                    reviewUser.classList.add("review-user")
                    userImg.setAttribute("src", "https://placehold.jp/80x80.png")
                    age.classList.add("age")
                    // ユーザーの名前と年齢を受け取る
                    usernameParag.innerHTML = `${person.username}さん`
                    age.innerHTML           = `${person.age}歳`
                    // ユーザー情報表示領域の完成
                    userImgParag.append(userImg)
                    usernameParag.append(age)
                    reviewUser.append(userImgParag)
                    reviewUser.append(usernameParag)

                    // レビュー表示領域領域の作成
                    const reviewContent = document.createElement("div")
                    const ratingArea    = document.createElement("div")
                    const ratingParag   = document.createElement("p")
                    const ratingSpan    = document.createElement("span")
                    const reason = document.createElement("p")
                    // 各要素へ属性の付与
                    reviewContent.classList.add("review-content")
                    ratingArea.classList.add("rating-area")
                    // ユーザー評価に合わせて星を設定
                    const rating = person.rating
                    if(person.rating === 1) {
                        ratingParag.innerHTML = `&#9733;&#9734;&#9734;&#9734;&#9734`
                    } else if(person.rating === 2) {
                        ratingParag.innerHTML = `&#9733;&#9733;&#9734;&#9734;&#9734`
                    } else if(person.rating === 3) {
                        ratingParag.innerHTML = `&#9733;&#9733;&#9733;&#9734;&#9734`
                    } else if(person.rating === 4) {
                        ratingParag.innerHTML = `&#9733;&#9733;&#9733;&#9733;&#9734`
                    } else if(person.rating === 5) {
                        ratingParag.innerHTML = `&#9733;&#9733;&#9733;&#9733;&#9733`
                    }
                    ratingSpan.innerHTML = person.rating
                    reason.innerHTML = person.reason
                    // レビュー表示領域の完成
                    ratingParag.append(ratingSpan)
                    ratingArea.append(ratingParag)
                    reviewContent.append(ratingArea)
                    reviewContent.append(reason)

                    // 各領域を内包する要素の作成
                    const contentWrapper = document.createElement("div")
                    contentWrapper.classList.add("review-contentarea")
                    contentWrapper.append(reviewUser)
                    contentWrapper.append(reviewContent)
                    // ブラウザへ出力
                    reviewArea.append(contentWrapper)
                })
            }

        </script>
    </body>
</html>
